class Solution {
public:
    double solve(int a, int b, vector<pair<int,int>> &serves, vector<vector<double>> &dp){
        if(a<=0 && b<=0){
            return 0.5;
        }

        if(a<=0){
            return 1.0;
        }

        if(b<=0){
            return 0.0;
        }

        if(dp[a][b] != -1.0){
            return dp[a][b];
        }

        double prob = 0.0;
        for(auto &temp : serves){
            int A = temp.first;
            int B = temp.second;

            prob += solve(a-A,b-B,serves,dp);
        }

        return dp[a][b] = 0.25 * prob;
    }
    double soupServings(int n) {
        if(n >= 5000){
            return 1;
        }
        vector<pair<int,int>> serves = {{100,0},{75,25},{50,50},{25,75}};
        vector<vector<double>> dp(n+1,vector<double>(n+1,-1.0));

        return solve(n,n,serves,dp);
    }
};
