//Memoization

class Solution {
    int solve(int i, int remain, vector<int> &cost, vector<int> &time,int n, vector<vector<int>> &dp){
        if(remain <= 0){
            return 0;
        }

        if(i >= n){
            return 1e9;
        }

        if(dp[i][remain] != -1){
            return dp[i][remain];
        }

        int paid = cost[i] + solve(i+1, remain-time[i]-1, cost, time,n,dp);
        int free = solve(i+1, remain,cost,time,n,dp);

        return dp[i][remain] = min(paid,free);
    }
public:
    int paintWalls(vector<int>& cost, vector<int>& time) {
        int n = cost.size();
        vector<vector<int>> dp(n+1, vector<int>(n+1,-1));
        return solve(0,n,cost,time,n,dp);
    }
};

// Tabulation
class Solution {
public:
    int paintWalls(vector<int>& cost, vector<int>& time) {
        int n = cost.size();
        vector<vector<int>> dp(n+1, vector<int>(n+1,0));
        
        for(int r=1; r<=n; r++){
            dp[n][r] = 1e9;
        }
        dp[n][0] = 0;

        for(int i=n-1; i>=0; i--){
            for(int r=0; r<=n; r++){
                if(r==0){
                    dp[i][r] = 0;
                }
                else{
                    int next = max(0,r-(time[i]+1));
                    int paid = cost[i] + dp[i+1][next];
                    int free = dp[i+1][r];

                    dp[i][r] = min(paid,free);
                }
            }
        }

        return dp[0][n];
    }
};

// Space Optimization
class Solution {
public:
    int paintWalls(vector<int>& cost, vector<int>& time) {
        int n = cost.size();
        vector<int> dp(n+1,1e9);
        
        dp[0] = 0;

        for(int i=n-1; i>=0; i--){
            vector<int> new_dp(n+1,1e9);
            new_dp[0] = 0;
            for(int r=1; r<=n; r++){
                    int next = max(0,r-(time[i]+1));
                    int paid = cost[i] + dp[next];
                    int free = dp[r];

                    new_dp[r] = min(paid,free);
            }

            dp = new_dp;
        }

        return dp[n];
    }
};
