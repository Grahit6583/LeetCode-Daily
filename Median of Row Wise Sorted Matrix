int solve(vector < vector < int >> & mat, int mid, int n, int m) {
    int cnt = 0;

    for (int i = 0; i < m; i++) {
        cnt += upper_bound(mat[i].begin(), mat[i].end(), mid) - mat[i].begin();
    }

    return cnt;
}

int find_median(vector < vector < int >> & mat) {
    int m = mat.size();
    int n = mat[0].size();

    int l = INT_MAX;
    int h = -1;
    int median = (m * n) / 2;

    for (int i = 0; i < m; i++) {
        l = min(l, mat[i][0]);
        h = max(h, mat[i][n - 1]);
    }

    while (l <= h) {
        int mid = (l + h) / 2;

        int smallEqual = solve(mat, mid, m, n);

        if (smallEqual > median) {
            h = mid - 1;
        }
        else {
            l = mid + 1;
        }
    }
    
    return l;
}
