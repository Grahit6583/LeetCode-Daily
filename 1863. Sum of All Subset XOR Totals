// Backtracking

class Solution {
    int solve(vector<int> &nums, int n, int i, int Xor){
        if(i == n){
            return Xor;
        }

        int take = solve(nums,n,i+1, Xor ^ nums[i]);
        int not_take = solve(nums,n,i+1, Xor);

        return take + not_take;
    }
public:
    int subsetXORSum(vector<int>& nums) {
        int n = nums.size();
        return solve(nums,n,0,0);
    }
};

// Optimized

class Solution {
public:
    int subsetXORSum(vector<int>& nums) {
        int n = nums.size();
        int res = 0;
        for(int i=0; i<n; i++){
            res |= nums[i];
        }
        return res << (n-1);
    }
};
