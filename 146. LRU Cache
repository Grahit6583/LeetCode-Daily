class Node{
    public:
        int key;
        int value;
        Node* next;
        Node* prev;
        Node(int key, int value){
            this->key = key;
            this->value = value;
            next = NULL;
            prev = NULL;
        }
};

class LRUCache {

    map<int,Node*> mp;
    int capacity;
    Node *head, *tail;

    void deleteNode(Node* node){
        Node *prevnode = node->prev;
        Node *afternode = node->next;

        prevnode->next = afternode;
        afternode->prev = prevnode;
    }

    void insertNode(Node* node){
        Node *afterhead = head->next;
        head->next = node;
        node->next = afterhead;
        node->prev = head;
        afterhead->prev = node;
    }

public:
    LRUCache(int capacity) {
        this->capacity = capacity;
        mp.clear();
        head = new Node(-1,-1);
        tail = new Node(-1,-1);
        head->next = tail;
        tail->prev = head;
    }
    
    int get(int key) {
        if(mp.find(key) != mp.end()){
            Node *node = mp[key];
            deleteNode(node);
            insertNode(node);
            return node->value;
        }

        return -1;
    }
    
    void put(int key, int value) {
        if(mp.find(key) != mp.end()){
            Node* node = mp[key];
            node->value = value;
            deleteNode(node);
            insertNode(node);
            return;
        }

        if(mp.size() == capacity){
            Node* node = tail->prev;
            mp.erase(node->key);
            deleteNode(node);
        }

        Node* node = new Node(key,value);
        mp[key] = node;
        insertNode(node);
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
