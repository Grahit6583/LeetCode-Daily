//Approach - Using Bipartite, DFS and BFS
//T.C : O(V * (V+E))
//S.C : O(V+E)
class Solution {
public:
    bool isBipartite(unordered_map<int, vector<int>> &adj, int curr, vector<int> &colors, int currColor){
        colors[curr] = currColor;

        for(int &nbr : adj[curr]){
            if(colors[curr] == colors[nbr]){
                return false;
            }

            if(colors[nbr] == -1){
                if(isBipartite(adj,nbr,colors,1-currColor) == false){
                    return false;
                }
            }
        }

        return true;
    }

    int bfs(unordered_map<int, vector<int>> &adj, int currNode, int n){
        queue<int> q;
        vector<bool> vis(n,false);
        q.push(currNode);
        vis[currNode] = true;
        int level = 0;
        while(!q.empty()){
            int size = q.size();

            for(int i=0; i<size; i++){
                int curr = q.front();
                q.pop();

                for(auto &it : adj[curr]){
                    if(!vis[it]){
                        q.push(it);
                        vis[it] = true;
                    }
                }
            }
            level++;
        }

        return  level;
    }

    int findGrp(unordered_map<int, vector<int>> &adj, int n, int node, vector<bool> &vis, vector<int> &levels){
        int maxi = levels[node];
        vis[node] = true;

        for(auto &it : adj[node]){
            if(!vis[it]){
                maxi = max(maxi,findGrp(adj,n,it,vis,levels));
            }
        }

        return maxi;
    }
    int magnificentSets(int n, vector<vector<int>>& edges) {
        unordered_map<int, vector<int>> adj;

        for(auto & edge : edges){
            int u = edge[0]-1;
            int v = edge[1]-1;

            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        vector<int> colors(n,-1);
        for(int node=0; node<n; node++){
            if(colors[node] == -1){
                if(isBipartite(adj,node,colors,1) == false){
                    return -1;
                }
            }
        }

        vector<int> levels(n,0);
        for(int node=0; node<n; node++){
            levels[node] = bfs(adj,node,n);
        }

        int maxGrp = 0;
        vector<bool> vis(n,false);
        for(int node=0; node<n; node++){
            if(!vis[node]){
                maxGrp += findGrp(adj,n,node,vis,levels);
            }
        }

        return maxGrp;
    }
};
