class Solution {
public:
    long long countGoodIntegers(int n, int k) {
        set<string> st;

        int d = (n+1)/2;
        int start = pow(10,d-1);
        int end = pow(10,d)-1;

        for(int num = start; num <= end; num++){
            string left_half = to_string(num);
            string full = "";

            if(n%2 == 0){
                string right = left_half;
                reverse(right.begin(),right.end());
                full = left_half + right;
            }
            else{
                string right = left_half.substr(0,d-1);
                reverse(right.begin(),right.end());
                full = left_half + right;
            }

            long long number = stoll(full);
            if(number % k != 0){
                continue;
            }
            
            sort(full.begin(),full.end());
            st.insert(full);
        }


        vector<long long> factorial(11,1);
        for(int i=1; i<11; i++){
            factorial[i] = factorial[i-1] * i;
        }

        long long res = 0;

        for(auto &s : st){
            vector<int> hash(10,0);
            for(auto &ch : s){
                hash[ch-'0']++;
            }

            int total = s.length();
            int nonzero = total - hash[0];

            long long permutation = nonzero * factorial[total-1];

            for(int i=0; i<10; i++){
                permutation /= factorial[hash[i]];
            }

            res += permutation;
        }

        return res;
    }
};
