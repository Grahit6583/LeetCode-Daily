// Using DFS
class Solution {
public:
    void dfs(int i, vector<vector<int>> &adj, vector<bool> &vis, int &v, int &e){
        vis[i] = true;
        v++;
        e += adj[i].size();
        for(int &nbr : adj[i]){
            if(!vis[nbr]){
                dfs(nbr,adj,vis,v,e);
            }
        }
    }
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        int m = edges.size();
        vector<vector<int>> adj(n);
        for(int i=0; i<m; i++){
            int u = edges[i][0];
            int v = edges[i][1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        int result = 0;
        vector<bool> vis(n,false);
        for(int i=0; i<n; i++){
            if(vis[i]){
                continue;
            }
            int v = 0;
            int e = 0;
            dfs(i,adj,vis,v,e);

            if((v*(v-1)) == e){
                result++;
            }
        }

        return result;
    }
};


// Using BFS

class Solution {
public:
    void bfs(int i, vector<vector<int>> &adj, vector<bool> &vis, int &v, int &e){
        queue<int> q;
        q.push(i);
        vis[i] = true;

        while(!q.empty()){
            int node = q.front();
            q.pop();

            v++;
            e += adj[node].size();

            for(int &nbr : adj[node]){
                if(!vis[nbr]){
                    vis[nbr] = true;
                    q.push(nbr);
                }
            }
        }
    }

    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        int m = edges.size();
        vector<vector<int>> adj(n);
        for(int i=0; i<m; i++){
            int u = edges[i][0];
            int v = edges[i][1];

            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        int result = 0;
        vector<bool> vis(n,false);
        for(int i=0; i<n; i++){
            if(vis[i]){
                continue;
            }
            int v = 0;
            int e = 0;
            bfs(i,adj,vis,v,e);

            if((v*(v-1)) == e){
                result++;
            }
        }

        return result;
    }
};

// Using DSU

class Solution {
public:
    class DSU{
        public :
            vector<int> parent;
            vector<int> size;
            DSU(int n){
                parent.resize(n);
                size.resize(n);
                for(int i=0; i<n; i++){
                    parent[i] = i;
                    size[i] = 1;
                }
            }

            int find(int x){
                if(parent[x] == x){
                    return x;
                }

                return parent[x] = find(parent[x]);
            }

            void Union(int x, int y){
                int x_par = find(x);
                int y_par = find(y);

                if(x_par == y_par){
                    return;
                }

                if(size[x_par] > size[y_par]){
                    parent[y_par] = x_par;
                    size[x_par] += size[y_par];
                }
                else if(size[y_par] > size[x_par]){
                    parent[x_par] = y_par;
                    size[y_par] += size[x_par];                    
                }
                else{
                    parent[x_par] = y_par;
                    size[y_par] += size[x_par]; 
                }
            }
    };
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        DSU dsu(n);
        map<int,int> mp;
        for(auto &edge : edges){
            int v = edge[0];
            int u = edge[1];

            dsu.Union(u,v);
        }

        for(auto &edge : edges){
            int v = edge[0];
            int u = edge[1];

            int root = dsu.find(u);
            mp[root]++;
        }

        int res = 0;
        for(int i=0; i<n; i++){
            if(dsu.find(i) == i){
                int v = dsu.size[i];
                int e = mp[i];

                if((v*(v-1))/2 == e){
                    res++;
                }
            }
        }

        return res;
    }
};
