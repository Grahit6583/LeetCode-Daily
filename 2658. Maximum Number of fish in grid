//T.C -> O(m*n)
//SC -> O(1)

class Solution {
public:
    int m,n;
    vector<vector<int>> directions = {{-1,0},{1,0},{0,-1},{0,1}};
    int dfs(int i, int j, vector<vector<int>> &grid){
        if(i<0 || j<0 || i>=m || j>=n || grid[i][j] == 0){
            return 0;
        }

        int fish = grid[i][j];
        grid[i][j] = 0;

        for(auto &dir : directions){
            int x = i + dir[0];
            int y = j + dir[1];

            fish += dfs(x,y,grid);
        }

        return fish;
    }
    int findMaxFish(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();

        int maxi = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                maxi = max(maxi,dfs(i,j,grid));
            }
        }

        return maxi;
    }
};
