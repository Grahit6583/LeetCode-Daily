/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* prev = nullptr;
        ListNode* curr = head;

        while (curr != NULL) {
            ListNode* nextNode = curr->next; 
            curr->next = prev;               
            prev = curr;                     
            curr = nextNode;
        }

        return prev;
    }

    ListNode *knode(ListNode *temp, int k){
        k-=1;
        while(k-- && temp != NULL){
            temp = temp->next;
        }

        return temp;
    }
    ListNode* reverseKGroup(ListNode* head, int k) {
        ListNode *temp = head;
        ListNode *prev = head; 
        while(temp != NULL){
            ListNode *kthnode = knode(temp,k);
            if(kthnode == NULL){
                if(prev) prev->next = temp;
                break;
            }

            ListNode *nextnode = kthnode->next;
            kthnode->next = NULL;
            reverseList(temp);
            if(temp == head){
                head = kthnode;
            }
            else{
                prev->next = kthnode;
            }

            prev = temp;
            temp = nextnode;
        }

        return head;
    }
};
