class Solution {
public:
    vector<vector<int>> rotate(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        vector<vector<int>> rotatedGrid(n, vector<int>(m));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                rotatedGrid[j][m - i - 1] = grid[i][j];
            }
        }

        return rotatedGrid;
    }
    int utility(vector<vector<int>> &grid) {
        int m = grid.size();
        int n = grid[0].size();
        int res = INT_MAX;
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                int top = minimumArea(0, i, 0, n, grid);
                int bottomLeft = minimumArea(i, m, 0, j, grid);
                int bottomRight = minimumArea(i, m, j, n, grid);

                res = min(res, (top + bottomLeft + bottomRight));

                int topLeft = minimumArea(0, i, 0, j, grid);
                int topRight = minimumArea(0, i, j, n, grid);
                int bottom = minimumArea(i, m, 0, n, grid);

                res = min(res, (topLeft + topRight + bottom));
            }
        }

        for (int i = 1; i < m; i++) {
            for (int j = i + 1; j < m; j++) {
                int top = minimumArea(0, i, 0, n, grid);
                int middle = minimumArea(i, j, 0, n, grid);
                int bottom = minimumArea(j, m, 0, n, grid);

                res = min(res, top + middle + bottom);
            }
        }

        return res;
    }
    int minimumArea(int stRow, int endRow, int stCol, int endCol,
                    vector<vector<int>>& grid) {
        int m = grid.size();    // Rows
        int n = grid[0].size(); // Columns

        int minRow = m;
        int maxRow = -1;
        int minCol = n;
        int maxCol = -1;

        for (int i = stRow; i < endRow; i++) {
            for (int j = stCol; j < endCol; j++) {
                if (grid[i][j] == 1) {
                    minRow = min(minRow, i);
                    maxRow = max(maxRow, i);

                    minCol = min(minCol, j);
                    maxCol = max(maxCol, j);
                }
            }
        }
        return (maxRow - minRow + 1) * (maxCol - minCol + 1);
    }
    int minimumSum(vector<vector<int>>& grid) {
        vector<vector<int>> g = rotate(grid);
        return min(utility(grid), utility(g));
    }
};
