//BRUTE FORCE
//T.C -> O(m*n)+O(m+n)
//S.C -> O(1)
class Solution {
public:
    int countServers(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        int cnt = 0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    bool flag = false;
                    for(int col = 0; col<n; col++){
                        if(grid[i][col] == 1 && col != j){
                            flag = true;
                        }
                    } 
                    if(flag){
                        cnt++;
                    }
                    else{
                        for(int row=0; row<m; row++){
                            if(grid[row][j] == 1 && i != row){
                                flag = true;
                            }
                        }

                        if(flag){
                            cnt++;
                        }
                    }
                }
            }
        }

        return cnt;
    }
};

//BETTER APPROACH
//T.C -> O(m*n)
//S.C -> O(m+n)
class Solution {
public:
    int countServers(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        int cnt = 0;
        vector<int> col(n,0);
        vector<int> row(m,0);
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    col[j]++;
                    row[i]++;
                }
            }
        }

        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1 && (col[j] > 1 || row[i] > 1)){
                    cnt++;
                }
            }
        }

        return cnt;
    }
};

//Optimal Approach
//T.C -> O(m*n) + m
//S.C -> O(m+n)
class Solution {
public:
    int countServers(vector<vector<int>>& grid) {
        int m = grid.size();
        int n = grid[0].size();

        int cnt = 0;
        vector<int> col(n,0);
        vector<int> row(m,-1);
        for(int i=0; i<m; i++){
            int sum = 0;
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1){
                    sum++;
                    col[j]++;
                    row[i] = j;
                }
            }
            if(sum > 1){
                cnt += sum;
                row[i] = -1;
            }
        }

        for(int i=0; i<m; i++){
            if(row[i] != -1){
                int j = row[i];
                if(col[j] > 1){
                    cnt++;
                }
            }
        }

        return cnt;
    }
};
